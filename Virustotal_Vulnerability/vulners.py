import os
import json
import requests
from dotenv import load_dotenv
from typing import List, Dict, Any, Optional

load_dotenv()

VULNERS_API_KEY: str = os.getenv("VULNERS_API", "YOUR_VULNERS_API_KEY")
VULNERS_URL: str = "https://vulners.com/api/v3/search/lucene/"
HEADERS_VULNERS: Dict[str, str] = {"X-Vulners-API-Key": VULNERS_API_KEY}
VULN_RESULTS_TXT: str = "vuln_results.txt"
VULN_SUMMARY_JSON: str = "vulnerability_summary.json"
APPS_LIST_FILE: str = "applications.json"

def fetch_vulnerabilities(app: str, version: str) -> Optional[List[Dict[str, Any]]]:
    query_str: str = f"{app} {version}"
    query_params: Dict[str, Any] = {"query": query_str, "size": 100, "sort": "cvss.score"}
    print(f"Выполняется запрос к Vulners для: {query_str}")
    try:
        resp = requests.get(VULNERS_URL, headers=HEADERS_VULNERS, params=query_params, timeout=10)
        resp.raise_for_status()
        result_data: Dict[str, Any] = resp.json()
        items: List[Dict[str, Any]] = result_data.get("data", {}).get("search", [])
        print(f"Получено {len(items)} результатов для {app} {version}")
        return items
    except requests.RequestException as err:
        print(f"Ошибка запроса для {app} {version}: {err}")
        return None

def evaluate_vulnerabilities(vuln_items: Optional[List[Dict[str, Any]]]) -> Dict[str, List[str]]:
    cve_codes: List[str] = []
    exploit_codes: List[str] = []
    if not vuln_items:
        print("Нет данных для оценки уязвимостей")
        return {"cve": [], "exploits": []}
    for item in vuln_items:
        src: Dict[str, Any] = item.get("_source", {})
        codes: List[str] = src.get("cvelist", [])
        for code in codes:
            if code.startswith("CVE-") and code not in cve_codes:
                cve_codes.append(code)
                if src.get("is_exploit", False) or "exploit" in src.get("type", "").lower():
                    exploit_codes.append(code)
    print(f"Обнаружено CVE: {len(cve_codes)}, эксплойтов: {len(exploit_codes)}")
    return {"cve": cve_codes, "exploits": exploit_codes}

if __name__ == "__main__":
    if not VULNERS_API_KEY:
        print("Ошибка: не найден API-ключ Vulners. Укажите его в .env как VULNERS_API.")
        exit(1)
    if not os.path.exists(APPS_LIST_FILE):
        print(f"Ошибка: файл {APPS_LIST_FILE} отсутствует. Добавьте список программ в этот файл.")
        exit(1)
    try:
        with open(APPS_LIST_FILE, "r", encoding="utf-8") as fin:
            software_data: List[Dict[str, Any]] = json.load(fin)
    except Exception as exc:
        print(f"Ошибка при чтении {APPS_LIST_FILE}: {exc}")
        exit(1)

    final_results: List[Dict[str, Any]] = []
    try:
        with open(VULN_RESULTS_TXT, "w", encoding="utf-8") as fout:
            fout.write("Программный отчёт по уязвимостям\n")
            fout.write("=" * 50 + "\n\n")
            for entry in software_data:
                product: str = entry["Program"]
                prod_version: str = entry["Version"]
                print(f"\nНачинается анализ: {product} {prod_version}")
                vuln_data = fetch_vulnerabilities(product, prod_version)
                eval_result = evaluate_vulnerabilities(vuln_data)
                record = {
                    "program": product,
                    "version": prod_version,
                    "vulnerable": bool(eval_result["cve"]),
                    "cve_list": eval_result["cve"],
                    "exploits_available": eval_result["exploits"]
                }
                final_results.append(record)
                fout.write(f"Программа: {product} {prod_version}\n")
                if eval_result["cve"]:
                    fout.write("Статус: Уязвима\n")
                    fout.write(f"Найденные CVE: {', '.join(eval_result['cve'])}\n")
                    if eval_result["exploits"]:
                        fout.write(f"Доступны эксплойты для: {', '.join(eval_result['exploits'])}\n")
                    else:
                        fout.write("Эксплойты отсутствуют\n")
                else:
                    fout.write("Статус: Не уязвима\n")
                fout.write("-" * 50 + "\n\n")
    except Exception as err:
        print(f"Ошибка при записи текстового отчёта: {err}")

    try:
        with open(VULN_SUMMARY_JSON, "w", encoding="utf-8") as jout:
            json.dump(final_results, jout, indent=4, ensure_ascii=False)
    except Exception as err:
        print(f"Ошибка при записи JSON-отчёта: {err}")

    print(f"Отчёты успешно сохранены в файлы {VULN_RESULTS_TXT} и {VULN_SUMMARY_JSON}")
