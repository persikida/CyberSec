import sys, os, time, json, zipfile
import requests
from dotenv import load_dotenv  # Для загрузки переменных окружения

# Загружаем переменные окружения и получаем API-ключ VirusTotal
load_dotenv()
vt_key = os.getenv("VT_API_KEY", "6e8c32c7663f3405b3eefa237cacc2a0f7f7de0db9a0c5eb5326eece8860665c")
upload_url = "https://www.virustotal.com/api/v3/files"
report_url_tpl = "https://www.virustotal.com/api/v3/analyses/{}"
req_headers = {"x-apikey": vt_key}
json_filename = "report.json"
antivirus_whitelist = {"Fortinet", "McAfee", "Yandex", "Sophos"}

# Проверка аргументов командной строки (ожидается путь к архиву)
if len(sys.argv) != 2:
    print("Используйте example.py <archive>.zip")
    sys.exit(1)

zip_filepath = sys.argv[1]
dest_folder = "upload"
zip_pwd_input = input("Укажите пароль от архива: ")
zip_pwd = zip_pwd_input if zip_pwd_input else None

def extract_archive(archive_path, destination, pwd):
    with zipfile.ZipFile(archive_path, 'r') as archive_obj:
        try:
            archive_obj.extractall(destination, pwd=pwd.encode('utf-8') if pwd else None)
            print("Файлы успешно извлечены.")
        except RuntimeError:
            print("Ошибка: неверный пароль или архив не защищен паролем.")

def send_to_vt(file_path):
    try:
        with open(file_path, "rb") as file_obj:
            resp = requests.post(upload_url, headers=req_headers, files={"file": file_obj})
    except requests.exceptions.RequestException as e:
        print(f"Ошибка при загрузке файла {file_path}: {e}")
        return ""
    if resp.status_code != 200:
        print(f"Ошибка при загрузке файла {file_path}: HTTP {resp.status_code} {resp.text}")
        return ""
    return resp.json().get("data", {}).get("id", "")

def fetch_vt_report(vt_id):
    try:
        resp = requests.get(report_url_tpl.format(vt_id), headers=req_headers)
    except requests.exceptions.RequestException as e:
        print(f"Ошибка при получении отчета для {vt_id}: {e}")
        return {}
    if resp.status_code != 200:
        print(f"Ошибка при получении отчета для {vt_id}: HTTP {resp.status_code} {resp.text}")
        return {}
    return resp.json()

if __name__ == "__main__":
    if not os.path.exists(dest_folder):
        os.makedirs(dest_folder)

    # Распаковка архива с файлами
    extract_archive(zip_filepath, dest_folder, zip_pwd)
    vt_ids = []
    scans_data = []  # Список для хранения данных каждого анализа

    print("\n--- Отправка файлов на анализ ---")
    for entry in os.listdir(dest_folder):
        full_entry_path = os.path.join(dest_folder, entry)
        vt_identifier = send_to_vt(full_entry_path)
        if not vt_identifier:
            continue  # Пропускаем файл, если не получен Scan ID
        print(f"\nФайл: {entry}")
        print(f"Scan ID: {vt_identifier}")
        vt_ids.append(vt_identifier)
        time.sleep(15)  # Задержка между запросами

    print("\n=== Получение отчетов ===")
    reports = {}
    for vt_id in vt_ids:
        reports[vt_id] = fetch_vt_report(vt_id)
        time.sleep(15)

    print("\n=== Итоговые результаты анализа ===")
    # Измененная структура JSON: все данные помещаются в список под ключом "scans"
    for vt_id, rpt in reports.items():
        stats = rpt.get("data", {}).get("attributes", {}).get("stats", {})
        detections = rpt.get("data", {}).get("attributes", {}).get("results", {})
        sandbox = rpt.get("data", {}).get("attributes", {}).get("sandbox_verdicts", [])
        malicious = {name for name, info in detections.items() if info.get("category") == "malicious"}
        whitelist_hits = malicious.intersection(antivirus_whitelist)
        whitelist_misses = antivirus_whitelist - malicious

        # Формируем объект с данными анализа для данного Scan ID
        scan_entry = {
            "scan_id": vt_id,
            "statistics": {
                "malicious": stats.get("malicious", 0),
                "suspicious": stats.get("suspicious", 0),
                "harmless": stats.get("harmless", 0)
            },
            "antivirus": {
                "detected": list(malicious),
                "whitelist_hits": list(whitelist_hits),
                "whitelist_misses": list(whitelist_misses)
            },
            "sandbox": sandbox
        }
        scans_data.append(scan_entry)

        print(f"\n[Scan ID: {vt_id}]")
        print(f"Malicious: {stats.get('malicious', 0)}")
        print(f"Suspicious: {stats.get('suspicious', 0)}")
        print(f"Harmless: {stats.get('harmless', 0)}")
        if malicious:
            print("Антивирусы, сработавшие на угрозу:")
            print(", ".join(malicious))
        else:
            print("Ни один антивирус не сработал.")

    # Объединяем все данные в итоговый JSON-объект с ключом "scans"
    analysis_results = {"scans": scans_data}

    # Сохраняем JSON-отчет для дальнейшего анализа
    with open(json_filename, "w", encoding="utf-8") as json_out:
        json.dump(analysis_results, json_out, indent=4, ensure_ascii=False)
    print(f"\nJSON-отчет сохранен в {json_filename}")
